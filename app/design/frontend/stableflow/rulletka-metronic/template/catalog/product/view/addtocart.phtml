<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magento.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magento.com for more information.
 *
 * @category    design
 * @package     base_default
 * @copyright   Copyright (c) 2006-2016 X.commerce, Inc. and affiliates (http://www.magento.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php $_product = $this->getProduct(); ?>

<?php if($_product->isSaleable()): ?>
    <?php if(!$_product->isGrouped()): ?>
        <label for="qty"><?php echo $this->__('') ?></label>
        <div class="number-panel pagination-panel-table">
            <a href="#" class="btn icon-default prev"><i class="icon icon-arrow-point-to-left"></i></a>
            <input name="qty" id="qty" value="<?php echo $this->getProductDefaultQty() * 1 ?>" title="<?php echo Mage::helper('core')->quoteEscape($this->__('Qty')) ?>" size="4" title="<?php echo $this->__('Qty') ?>" class="input-text qty pagination-panel-input form-control input-inline input-default input-mini" maxlength="5" />
            <a href="#" class="btn icon-default next"><i class="icon icon-arrow-point-to-right"></i></a>
        </div>

    <?php endif; ?>

	<?php if ($this->displayProductStockStatus()): ?>
	    <?php if ($_product->isAvailable()): ?>
	        <div class="availability in-stock"><?php echo $this->__('') ?> <span class="availability-txt"><?php echo $this->__('In stock') ?></span></div>
	    <?php else: ?>
	        <div class="availability out-of-stock"><?php echo $this->__('') ?> <span class="availability-txt"><?php echo $this->__('Out of stock') ?></span></div>
	    <?php endif; ?>
	<?php endif; ?>
	
    <button class="button btn-cart btn yellow btn-lg btn-width border-radius-none bold margin-top-min" type="button" title="<?php echo $buttonTitle ?>" id="product-addtocart-button" onclick="productAddToCartForm.submit(this)"><i class="icon icon-shopping-cart"></i></button>
    <button class="btn yellow btn-lg btn-width border-radius-none bold margin-top-min" type="button"><?php echo $this->__('Buy it now') ?></button>
    <?php echo $this->getChildHtml('', true, true) ?>
<?php endif; ?>
<script type="text/javascript">
    (function ($) {

        $.fn.iLightInputNumber = function (options) {

            var inBox = '.input-number-box',
                newInput = '.input-number',
                moreVal = '.input-number-more',
                lessVal = '.input-number-less';

            this.each(function () {

                var el = $(this);
                $('<div class="' + inBox.substr(1) + '"></div>').insertAfter(el);
                var parent = el.find('+ ' + inBox);
                parent.append(el);
                var classes = el.attr('class');
                parent.append('<input class="' + newInput.substr(1) + '" type="text">');
                el.hide();
                var newEl = el.next();
                newEl.addClass(classes);
                var attrValue;

                function setInputAttr(attrName) {
                    if (el.attr(attrName)) {
                        attrValue = el.attr(attrName);
                        newEl.attr(attrName, attrValue);
                    }
                }

                setInputAttr('value');
                setInputAttr('placeholder');
                setInputAttr('min');
                setInputAttr('max');
                setInputAttr('step');

                parent.append('<div class=' + moreVal.substr(1) + '></div>');
                parent.append('<div class=' + lessVal.substr(1) + '></div>');

            }); //end each

            var value,
                step;

            var interval = null,
                timeout = null;

            function ToggleValue(input) {
                input.val(parseInt(input.val(), 10) + d);
                console.log(input);
            }

            $('add-to-box').on('mousedown', moreVal, function () {
                var el = $(this);
                var input = el.siblings(newInput);
                moreValFn(input);
                timeout = setTimeout(function(){
                    interval = setInterval(function(){ moreValFn(input); }, 50);
                }, 200);

            });

            $('add-to-box').on('mousedown', lessVal, function () {
                var el = $(this);
                var input = el.siblings(newInput);
                lessValFn(input);
                timeout = setTimeout(function(){
                    interval = setInterval(function(){ lessValFn(input); }, 50);
                }, 200);
            });

            $(moreVal +', '+ lessVal).on("mouseup mouseout", function() {
                clearTimeout(timeout);
                clearInterval(interval);
            });

            function moreValFn(input){
                var max = input.attr('max');
                checkInputAttr(input);
                var newValue = value + step;
                if (newValue > max) {
                    newValue = max;
                }
                changeInputsVal(input, newValue);
            }

            function lessValFn(input){
                var min = input.attr('min');
                checkInputAttr(input);
                var newValue = value - step;
                if (newValue < min) {
                    newValue = min;
                }
                changeInputsVal(input, newValue);
            }

            function changeInputsVal(input, newValue){
                input.val(newValue);
                var inputNumber = input.siblings(this);
                inputNumber.val(newValue);
            }

            function checkInputAttr(input) {
                if (input.attr('value')) {
                    value = parseFloat(input.attr('value'));
                } else if (input.attr('placeholder')) {
                    value = parseFloat(input.attr('placeholder'));
                }
                if (!( $.isNumeric(value) )) {
                    value = 0;
                }
                if (input.attr('step')) {
                    step = parseFloat(input.attr('step'));
                } else {
                    step = 1;
                }
            }

            $(newInput).change(function () {
                var input = $(this);
                var value = parseFloat(input.val());
                var min = input.attr('min');
                var max = input.attr('max');
                if (value < min) {
                    value = min;
                } else if (value > max) {
                    value = max;
                }
                if (!( $.isNumeric(value) )) {
                    value = '';
                }
                input.val(value);
                input.siblings(this).val(value);
            });

            $(newInput).keydown(function(e){
                var input = $(this);
                var k = e.keyCode;
                if( k == 38 ){
                    moreValFn(input);
                }else if( k == 40){
                    lessValFn(input);
                }
            });
        };
    })(jQuery);
</script>